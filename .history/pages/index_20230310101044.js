import Head from "next/head";
import styles from "../styles/Home.module.css";
import Node from "../components/Node";
import { visualizeDijistras } from "../algorithms/dijkstras";
import { useState } from "react";
import { visualizeDfs } from "../algorithms/dfs";
import { visualizeBfs } from "../algorithms/bfs";
import { visualizeAstar } from "../algorithms/aStar";
import { visualizeBidirectional } from "../algorithms/bidirectional";

export const START_ROW = 5;
export const START_COL = 10;
export const END_ROW = 10;
export const END_COL = 40;

function getInitialGrid() {
  let grid = [];
  for (let i = 0; i < 20; i++) {
    let row = [];
    for (let j = 0; j < 50; j++) {
      const node = {
        row: i,
        col: j,
        isStart: i === START_ROW && j === START_COL,
        isEnd: i === END_ROW && j === END_COL,
        distance: Infinity,
        parent: null,
        isVisited: false,
        isInPath: false,
        isWall: false,
        huristic: Infinity,
        totalDistance: 0,
      };
      row.push(node);
    }
    grid.push(row);
  }
  return grid;
}

const canBecomeWall = (row, col) => {
  return row != END_ROW || col != END_COL;
};

export default function Home() {
  const [grid, setGrid] = useState(getInitialGrid());
  const [mouseDown, setMouseDown] = useState(false);

  const handleMouseDown = (row, col) => {
    if (!canBecomeWall(row, col)) return;
    setMouseDown(true);
    setCellAsWall(row, col);
  };

  const handleMouseEnter = (row, col) => {
    if (!canBecomeWall(row, col)) return;
    if (mouseDown) {
      setCellAsWall(row, col);
    }
  };

  const handleMouseUp = () => {
    setMouseDown(false);
  };

  const setCellAsWall = (row, col) => {
    let newGrid = grid.slice();
    newGrid[row][col].isWall = !newGrid[row][col].isWall;
    setGrid(newGrid);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Pathfinding Visualizer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.buttons}>
        <button onClick={() => visualizeDijistras(grid, setGrid)}>
          Visualize Dijkstras
        </button>
        <button onClick={() => visualizeDfs(grid, setGrid)}>
          Visualize Dfs
        </button>
        <button onClick={() => visualizeBfs(grid, setGrid)}>
          Visualize Bfs
        </button>
        <button onClick={() => visualizeAstar(grid, setGrid)}>
          Visualize Astar
        </button>
        <button onClick={() => visualizeBidirectional(grid, setGrid)}>
          Visualize Bidirectional
        </button>
        <button onClick={() => setGrid(getInitialGrid())}>Clear Board</button>
      </div>
      {grid.map((row, index) => (
        <div key={index} className={styles.row}>
          {row.map((node, index) => (
            <Node
              key={index}
              row={node.row}
              col={node.col}
              isStart={node.isStart}
              isEnd={node.isEnd}
              distance={node.distance}
              isVisited={node.isVisited}
              isInPath={node.isInPath}
              isWall={node.isWall}
              handleMouseDown={handleMouseDown}
              handleMouseUp={handleMouseUp}
              handleMouseEnter={handleMouseEnter}
            ></Node>
          ))}
        </div>
      ))}
    </div>
  );
}
